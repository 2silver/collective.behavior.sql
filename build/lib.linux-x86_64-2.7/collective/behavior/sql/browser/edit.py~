import logging
from Acquisition import aq_get, aq_parent
from zope.interface import implements, Interface
from plone.schemaeditor.browser.field.edit import FieldEditForm, EditView
from collective.behavior.sql.interfaces import ISQLFieldEditForm, ISQLTypeSettings
from z3c.form.interfaces import DISPLAY_MODE, INPUT_MODE, NOVALUE, HIDDEN_MODE
from z3c.form import button, form
LOG = logging.getLogger(__name__)
_marker = object()

class SQLFieldEditForm(FieldEditForm):
    implements(ISQLFieldEditForm)

    def __init__(self, context, request):
        super(SQLFieldEditForm, self).__init__(context, request)
        self.field.context = context
        self.sqlfti = ISQLTypeSettings(self.context.fti)
        datas = {}
        for a,b in [(line.split(':')[0],line.split(':')[1]) for line in getattr(self.sqlfti, 'sql_fields_columns', [])]:
            datas[a] = b
        if datas.get(self.field.__name__):
            self.field.sql_column = datas[self.field.__name__]

    def updateFields(self):
        super(SQLFieldEditForm, self).updateFields()
        TypeSettings = aq_parent(self.context)
        for field in self.fields:
            if field.field.__name__ in TypeSettings.fieldsWhichCannotBeDeleted:
            # Disable fields edition from behaviors (we store only sql_column)
                if field.field.__name__ in list(self._schema):
                    field.mode = DISPLAY_MODE

    def applyChanges(self, data):
        changes = super(SQLFieldEditForm, self).applyChanges(data)
        if data.get('IFieldSQLBehavior.sql_column', _marker) != _marker:
            datas = {}
            for a,b in [(line.split(':')[0],line.split(':')[1]) for line in getattr(self.sqlfti, 'sql_fields_columns', [])]:
                datas[a] = b
            if not data['IFieldSQLBehavior.sql_column'] and datas.get(self.field.__name__):
                del datas[self.field.__name__]
            else:
                datas[self.field.__name__] = data['IFieldSQLBehavior.sql_column']
            self.sqlfti.sql_fields_columns = [a+':'+b for a,b in datas.items()]
        return changes


class SQLEditView(EditView):
    form = SQLFieldEditForm

