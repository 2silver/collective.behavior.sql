from zope.interface import implementer
from zope.component import adapter
from plone.dexterity.interfaces import IDexterityFTI
from sqlalchemy import create_engine, MetaData, Table
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import scoped_session, sessionmaker, relation
from sqlalchemy import create_engine, MetaData, Table, text
from sqlalchemy.engine import reflection
from sqlalchemy.ext.declarative import declarative_base
from zope.sqlalchemy import ZopeTransactionExtension
from collective.behavior.sql.interfaces import ISQLDexterityFTI

@adapter(IDexterityFTI)
@implementer(ISQLDexterityFTI)
class SQLDexterityFTIAdapter(object):

    insp = None
    conn = None
    session = None
    
    def __init__(self, fti):
        self.fti = fti
        if self.conn == None:
            self.initConnections()

    def initConnections(self):
        sql_connection = self.fti.sql_connection
        sql_table = self.fti.sql_table
        sql_id_column = self.fti.sql_id_column
        engine = create_engine(sql_connection)
        self.insp = reflection.Inspector.from_engine(engine)
        d_base = declarative_base(bind=engine)
        self.conn = d_base.metadata.bind.contextual_connect()
        a_base = automap_base(bind=engine)
        a_base.metadata.reflect(only=[sql_table])
        a_base.prepare(Base.metadata.bind)
        Session = scoped_session(sessionmaker(bind=a_base.metadata.bind, extension=ZopeTransactionExtension()))
        self.session = Session()

