import logging
from Products.CMFCore.utils import getToolByName
from Products.ZCatalog.CatalogBrains import AbstractCatalogBrain, NoBrainer, _REQUESTCONTAINER_EXISTS, _GLOBALREQUEST_INSTALLED
from Products.ZCatalog.ZCatalog import ZCatalog
from plone.dexterity.interfaces import IDexterityFTI
from collective.behavior.sql.interfaces import ISQLConnectionsUtility
from zope.component import getUtility
from Acquisition import aq_base
from Acquisition import aq_get
from Acquisition import aq_parent
if _GLOBALREQUEST_INSTALLED:
    from zope.globalrequest import getRequest
    
LOG = logging.getLogger(__name__)

def setupCBSQL(context):
    if context.readDataFile('collective_behavior_sql.txt') is None:
        return
    portal = context.getSite()
    catalog = getToolByName(portal, 'portal_catalog')
    
    class SQLCatalogBrain(AbstractCatalogBrain):

        def getObject(self, REQUEST=None):
            try:
                return super(SQLCatalogBrain, self).getObject(REQUEST)
            except:
                path = self.getPath().split('/')
                if not path:
                    return None
                parent = aq_parent(self)
                if (aq_get(parent, 'REQUEST', None) is None
                    and _GLOBALREQUEST_INSTALLED and _REQUESTCONTAINER_EXISTS):
                    request = getRequest()
                    if request is not None:
                        # path should be absolute, starting at the physical root
                        parent = self.getPhysicalRoot()
                        request_container = RequestContainer(REQUEST=request)
                        parent = aq_base(parent).__of__(request_container)
                if len(path) > 1:
                    parent = parent.unrestrictedTraverse(path[:-1])
                LOG.info(parent.getId())
                connection = getUtility(ISQLConnectionsUtility, name='company')
                return connection.getVirtualItem(self.getId)
            return toto

    scopy = catalog._catalog.schema.copy()
    schema_len = len(catalog._catalog.schema.keys())
    scopy['data_record_id_'] = schema_len
    scopy['data_record_score_'] = schema_len + 1
    scopy['data_record_normalized_score_'] = schema_len + 2
    SQLCatalogBrain.__record_schema__ = scopy
    catalog._catalog._v_result_class = SQLCatalogBrain
    LOG.info('portal_catalog now uses SQLCatalogBrain (default brain extended)')
    

def uninstallCBSQL(context):
    if context.readDataFile('collective_behavior_sql_uninstall.txt') is None:
        return
    portal = context.getSite()
    catalog = getToolByName(portal, 'portal_catalog')
    class mybrains(AbstractCatalogBrain, brains):
        pass
    catalog._catalog._v_result_class = mybrains
    LOG.info('portal_catalog now uses AbstractCatalogBrainn')
